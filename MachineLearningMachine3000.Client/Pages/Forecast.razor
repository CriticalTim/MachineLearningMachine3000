@page "/forecast"
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))
@*@attribute [StreamRendering]*@
@using Microsoft.AspNetCore.Components.Web

@inject HttpClient Http
@inject Calculation calc
@using MachineLearningMachine3000.Shared.Entities;


<PageTitle>Foracast und Datenview</PageTitle>

<h1>- Forcasting Machine -</h1>

<hr />
<form>
    <div class="row">
        <div class="col">
            <button type="button" class="btn btn-outline-primary" @onclick="Calculate"> Forecast erstellen </button>
        </div>
        <div class="col">
            <label class="control-label">Windowsize</label>
            <input class="form-control" @bind="@parameter.windowSize" />
        </div>
        <div class="col">
            <label class="control-label">seriesLength</label>
            <input class="form-control" @bind="@parameter.seriesLength" />
        </div>
        <div class="col">
            <label class="control-label">trainSize</label>
            <input class="form-control" @bind="@parameter.trainSize" />
        </div>
        <div class="col">
            <label class="control-label">horizon</label>
            <input class="form-control" @bind="@parameter.horizon" />
        </div>
        <div class="col">
            <label class="control-label">confidenceLevel</label>
            <input class="form-control" @bind="@parameter.confidenceLevel" />
        </div>
    </div>
</form>

<hr />
<div class="table-container">

    @if (factCases == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {

        <div class="containerbla" style="margin-right:2%;">
            <h1>Ausgangsdaten</h1>
            <hr />
            <div class="table1">

                <table>
                    <thead>
                        <tr>
                            <th>Datum</th>
                            <th>    Eingänge Neu</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var fact in factCases)
                        {
                            <tr>
                                <td>@fact.DateId.ToString()</td>
                                <td><div class="vertical-line"></div></td>
                                <td>@fact.SummeVonEingangNeu</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    }
    @if (results == null)
    {
        <div style="margin-top: 50%;">
            <p><em>No Forecast available..</em></p>
        </div>

    }
    else
    {
        <div class="containerbla" style="margin-right:2%;">
            <h1>Forecast</h1>
            <hr />
            <div class="table2">

                <table>
                    <thead>
                        <tr>
                            <th>Datum</th>
                            <th>    Eingänge Neu</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var result in results)
                        {
                            <tr>
                                <td>@result.Date.ToShortDateString()</td>
                                <td><div class="vertical-line"></div></td>
                                <td>@result.Value</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>

    }


    @if (resultsNeu != null)
    {
        <div class="containerbla">
            <h1>Forecast Neu</h1>
            <hr />
            <div class="table2">

                <table>
                    <thead>
                        <tr>
                            <th>Datum</th>
                            <th>    Eingänge Neu</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var result in resultsNeu)
                        {
                            <tr>
                                <td>@result.Date.ToShortDateString()</td>
                                <td><div class="vertical-line"></div></td>
                                <td>@result.Value</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>

    }
</div>
<hr />
@if (results != null)
{
    <div class="row">
        <div class="col">
            <button type="button" class="btn btn-outline-primary" @onclick="Commit"> Speichere Forecast auf Datenbank</button>
        </div>

        <div class="col">
            <input class="form-control" @bind="@dbSpeichernSuccess" placeholder="Noch nichts gespeichert." disabled />
        </div>
    </div>

}
else
{
    <div>
        <p><em>No Forecast available..</em></p>
    </div>
}
<hr />
@if (@dbSpeichernSuccess == "Erfolgreich gespeichert")
{
    <div class="row">
        <div class="col">
            <button type="button" class="btn btn-outline-primary" @onclick="ParameterTuning"> Beste Forecast Parameter finden</button>
        </div>

        <div class="col">
            <input class="form-control" placeholder="Durch diese Aktion werden verschiedene Parameter ausgetestet bis die Vorhersage am besten zu schon bestehenden Daten past" disabled />
        </div>
    </div>
    <hr />
}






@code {


    List<FactCase> factCases = new List<FactCase>();
    List<FactCaseForecast> factCaseForecasts = new List<FactCaseForecast>();
    List<ResultSet>? results = null;
    List<ResultSet>? resultsNeu = null;
    ForecastParameter parameter = new ForecastParameter();
    String dbSpeichernSuccess = String.Empty;

    protected override async Task OnInitializedAsync()
    {

        
        factCases = await Http.GetFromJsonAsync<List<FactCase>>("api/FactCase");

    }

    void Calculate()
    {
        results = calc.ForecastCalculate(factCases, parameter);
        StateHasChanged();
    }

    public async Task Commit()
    {
        if (results == null)
        {
            dbSpeichernSuccess = "Speichern fehlgeschlagen. Resultate Tabelle leer.";
            StateHasChanged();
            return;
        }
        try
        {
            foreach (var result in results)
            {
                string formattedDate = result.Date.ToString("yyyyMMdd");
                int dateAsInt = Convert.ToInt32(formattedDate);

                factCaseForecasts.Add(new FactCaseForecast
                {
                    DateId = dateAsInt,
                    SummeVonEingangNeuForecast = result.Value
                });
            }



            await Http.PostAsJsonAsync("api/Forecast", factCaseForecasts);

            dbSpeichernSuccess = "Erfolgreich gespeichert";
            StateHasChanged();
            resultsNeu = calc.ForecastRecalculate(factCaseForecasts, parameter);
            StateHasChanged();
        }
        catch(Exception ex)
        {
            dbSpeichernSuccess = "Speichern fehlgeschlagen";
            StateHasChanged();
        }




    }

    async Task ParameterTuning()
    {

        

        ////neue Parameter

        //resultsNeu = calc.ForecastCalculate(factCases, parameter);
        //StateHasChanged();
    }





}

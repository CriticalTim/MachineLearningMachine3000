@page "/forecast"
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@attribute [StreamRendering]
@using Microsoft.AspNetCore.Components.Web

@inject IFactCaseService FactCaseService
@inject Calculation calc
@using MachineLearningMachine3000.Forecast;

@using MachineLearningMachine3000.Data;
@using MachineLearningMachine3000.Services;

<PageTitle>Foracast und Datenview</PageTitle>

<h1>- Forcasting Machine -</h1>

<hr />
<form>
    <div class="row">
        <div class="col">
            <button type="button" class="btn btn-outline-primary" @onclick="Calculate"> Forecast erstellen </button>
        </div>
        <div class="col">
            <label class="control-label">Windowsize</label>
            <input class="form-control"  @bind="@parameter.windowSize" placeholder="7" />
        </div>
        <div class="col">
            <label class="control-label">seriesLength</label>
            <input class="form-control"  @bind="@parameter.seriesLength" placeholder="1183" />
        </div>
        <div class="col">
            <label class="control-label" >trainSize</label>
            <input class="form-control"@bind="@parameter.trainSize" placeholder="1000" />
        </div>
        <div class="col">
            <label class="control-label" >horizon</label>
            <input class="form-control" @bind="@parameter.horizon" placeholder="38" />
        </div>
        <div class="col">
            <label class="control-label">confidenceLevel</label>
            <input class="form-control"  @bind="@parameter.confidenceLevel" placeholder="0.95" />
        </div>
    </div>
</form> 

<hr />
<div class="table-container">

    @if (factCases == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {

        <div class="containerbla" style="margin-right:20%;">
            <h1>Alte Werte</h1>
            <hr />
            <div class="table1">

                <table>
                    <thead>
                        <tr>
                            <th>Datum</th>
                            <th>    Eingänge Neu</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var fact in factCases)
                        {
                            <tr>
                                <td>@fact.DateId.ToString()</td>
                                <td><div class="vertical-line"></div></td>
                                <td>@fact.SummeVonEingangNeu</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    }



    @if (results == null)
    {
        <div style="margin-top: 50%;">
            <p><em>No Forecast available..</em></p>
        </div>

    }
    else
    {
        <div class="containerbla">
            <h1>Forecast</h1>
            <hr />
            <div class="table2">

                <table>
                    <thead>
                        <tr>
                            <th>Datum</th>
                            <th>    Eingänge Neu</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var result in results)
                        {
                            <tr>
                                <td>@result.Date.ToShortDateString()</td>
                                <td><div class="vertical-line"></div></td>
                                <td>@result.Value</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>

    }
</div>
<hr />
@if (results != null)
{
    <div class="row">
        <div class="col">
            <button type="button" class="btn btn-outline-primary"> CommitForecast</button>
        </div>

        <div class="col">
            <input class="form-control" placeholder="Speichern nicht möglich." disabled />
        </div>
    </div>

}
else
{
    <div>
        <p><em>No Forecast available..</em></p>
    </div>
}
<hr />
<h1> Graphischer Vergleich</h1>
<hr />










@code {


    List<FactCase> factCases = new List<FactCase>();
    List<ResultSet>? results = null;
    ForecastParameter parameter = new ForecastParameter();

    protected override async Task OnInitializedAsync()
    {

        factCases = await FactCaseService.GetFactCasesAsync();

        //results = calc.ForecastCalculate(factCases);

    }



    void Calculate()
    {

        results = calc.ForecastCalculate(factCases, parameter);

        StateHasChanged();

    }



}
